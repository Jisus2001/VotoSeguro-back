trigger:
  branches:
    include:
      - main

pool:
  name: 'Default'

variables:
  # Habilita BuildKit
  DOCKER_BUILDKIT: 1

steps:
  # 1Ô∏è‚É£ Checkout del c√≥digo
  - checkout: self

  # 2Ô∏è‚É£ Instalar Node.js
  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node.js'

  # 3Ô∏è‚É£ Instalar dependencias
  - script: |
      npm ci
    displayName: 'Install npm dependencies'

  # 4Ô∏è‚É£ Build de las im√°genes de Docker
  - script: |
      docker-compose build
    displayName: 'Build Docker images'

  # 5Ô∏è‚É£ Levantar contenedores de tests (detached)
  - script: |
      docker-compose up -d
    displayName: 'Start test containers'

  # 6Ô∏è‚É£ Ejecutar Unit Tests
  - script: |
      docker exec unit-tests sh -c "npm run test:unit"
    displayName: 'Run Unit Tests'

  # 7Ô∏è‚É£ Ejecutar Integration Tests
  - script: |
      docker exec integration-tests sh -c "npx jest tests/Integracion --verbose --runInBand --reporters=default --reporters=jest-junit"
    displayName: 'Run Integration Tests'

  # 8Ô∏è‚É£ Publicar resultados de Unit Tests
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/reports/unit/*.xml'
      testRunTitle: 'Unit Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true

  # 9Ô∏è‚É£ Publicar resultados de Integration Tests
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/reports/integration/*.xml'
      testRunTitle: 'Integration Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true

  #  üîπ Opcional: detener y limpiar contenedores al final
  - script: |
      docker-compose down -v
    displayName: 'Clean up test containers'
